builder.Services.ConfigureApplicationCookie(options =>
{
 options.Cookie.HttpOnly = true;
options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
    options.Cookie.SameSite = SameSiteMode.Lax;
    options.ExpireTimeSpan = TimeSpan.FromMinutes(30);
    options.SlidingExpiration = true;
    options.Cookie.MaxAge = options.ExpireTimeSpan;

    options.LoginPath = "/Identity/Account/Login";
    options.AccessDeniedPath = "/Identity/Account/AccessDenied";
    options.LogoutPath = "/Identity/Account/Logout";
options.Events.OnValidatePrincipal = async context =>
    {
        var expiresAt = context.Properties.GetTokenValue("expires_at");
        if (DateTime.TryParse(expiresAt, null, System.Globalization.DateTimeStyles.RoundtripKind, out var expiresUtc))
        {
            if (expiresUtc < DateTime.UtcNow)
            {
                var refreshToken = context.Properties.GetTokenValue("refresh_token");
                var clientId = Environment.GetEnvironmentVariable("GOOGLE_CLIENT_ID");
                var clientSecret = Environment.GetEnvironmentVariable("GOOGLE_CLIENT_SECRET");

                var tokenRequest = new Dictionary<string, string>
                {
                    { "client_id", clientId },
                    { "client_secret", clientSecret },
                    { "refresh_token", refreshToken },
                    { "grant_type", "refresh_token" }
                };

                using var client = new HttpClient();
                var response = await client.PostAsync("https://oauth2.googleapis.com/token", new FormUrlEncodedContent(tokenRequest));
                var content = await response.Content.ReadAsStringAsync();

                var tokenResponse = JsonDocument.Parse(content);
                var newAccessToken = tokenResponse.RootElement.GetProperty("access_token").GetString();
                var newRefreshToken = tokenResponse.RootElement.TryGetProperty("refresh_token", out var rToken)
                    ? rToken.GetString()
                    : refreshToken;
                var newExpiresIn = tokenResponse.RootElement.GetProperty("expires_in").GetInt32();
                var newExpiresAt = DateTime.UtcNow.AddSeconds(newExpiresIn);

                context.Properties.UpdateTokenValue("access_token", newAccessToken);
                context.Properties.UpdateTokenValue("refresh_token", newRefreshToken);
                context.Properties.UpdateTokenValue("expires_at", newExpiresAt.ToString("o"));

                await context.HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    context.Principal,
                    context.Properties
                );
            }
        }
    };
});

// Konfiguracja OAuth Google
var googleClientId = Environment.GetEnvironmentVariable("GOOGLE_CLIENT_ID") ?? throw new InvalidOperationException("GOOGLE_CLIENT_ID is not set");
var googleClientSecret = Environment.GetEnvironmentVariable("GOOGLE_CLIENT_SECRET") ?? throw new InvalidOperationException("GOOGLE_CLIENT_SECRET is not set");


builder.Services.AddAuthentication(options =>
{
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
@@ -115,59 +120,55 @@
    options.ClientId = googleClientId;
    options.ClientSecret = googleClientSecret;
    options.CallbackPath = "/signin-google";
    options.AuthorizationEndpoint += "?access_type=offline&prompt=consent";
    options.SaveTokens = true;
});


// Dodatkowe us≈Çugi
builder.Services.AddHttpClient();
builder.Services.AddHttpClient<TokenService>();
builder.Services.AddTransient<IEmailSender, WebApplication1.ExtraTools.NullEmailSender>();
builder.Services.AddScoped<QrService>();
builder.Services.AddScoped<SmsService>();
builder.Services.AddScoped<EmailService>();
builder.Services.AddAuthorization();

